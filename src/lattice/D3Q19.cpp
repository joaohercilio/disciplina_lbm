#include "lattice/D3Q19.hpp"

void D3Q19::computeEquilibrium(double* feq, const double drho, const double vx, const double vy, const double vz) const {
    
    double vx2 = vx*vx;
    double vy2 = vy*vy;
    double vz2 = vz*vz;

    double rho0 = w_[0]*(1.0 + drho);
    double rho1 = w_[1]*(1.0 + drho);
    double rho2 = w_[7]*(1.0 + drho);

    double drho0 = w_[0]*drho;
    double drho1 = w_[1]*drho;
    double drho2 = w_[7]*drho;

    double ax = 3.0 * vx;
    double ay = 3.0 * vy;
    double az = 3.0 * vz;

	feq[0] = - 1.5 * ( vx2 + vy2 + vz2 );

	feq[1] = feq[0] + 4.5 * vx2;
	feq[2] = rho1 * ( feq[1] - ax ) + drho1;
	feq[1] = rho1 * ( feq[1] + ax ) + drho1;

	feq[3] = feq[0] + 4.5 * vy2;
	feq[4] = rho1 * ( feq[3] - ay ) + drho1;
	feq[3] = rho1 * ( feq[3] + ay ) + drho1;

	feq[5] = feq[0] + 4.5 * vz2;
	feq[6] = rho1 * ( feq[5] - az ) + drho1;
	feq[5] = rho1 * ( feq[5] + az ) + drho1;

	double cv = (ax + ay);
	feq[7] = feq[0] + 0.5*cv*cv;
	feq[8] = rho2 * ( feq[ 7] - cv ) + drho2;
	feq[7] = rho2 * ( feq[ 7] + cv ) + drho2;

	cv = (ax - ay);
	feq[9]  = feq[0] + 0.5*cv*cv;
	feq[10] = rho2 * ( feq[ 9] - cv ) + drho2;
	feq[9]  = rho2 * ( feq[ 9] + cv ) + drho2;

	cv = (ax + az);
	feq[11] = feq[0] + 0.5*cv*cv;
	feq[12] = rho2 * ( feq[11] - cv ) + drho2;
	feq[11] = rho2 * ( feq[11] + cv ) + drho2;

	cv = (ax - az);
	feq[13] = (feq[0] + 0.5*cv*cv);
	feq[14] = rho2 * ( feq[13] - cv ) + drho2;
	feq[13] = rho2 * ( feq[13] + cv ) + drho2;

	cv = (-ay - az);
	feq[15] = feq[0] + 0.5*cv*cv;
	feq[16] = rho2 * ( feq[15] - cv ) + drho2;
	feq[15] = rho2 * ( feq[15] + cv ) + drho2;

	cv = (-ay + az);
	feq[17] = feq[0] + 0.5*cv*cv;
	feq[18] = rho2 * ( feq[17] - cv ) + drho2;
	feq[17] = rho2 * ( feq[17] + cv ) + drho2;

    feq[0] = rho0 * feq[0] + drho0;
}

void D3Q19::computeFields(const double* f, double& drho, double& vx, double& vy, double& vz) const {
    
    drho = f[0] + f[1] + f[2] + f[3] + f[4] + f[5] + f[6] + f[7] + f[8] + f[9] + f[10] + f[11] + f[12] + f[13] + f[14] + f[15] + f[16] + f[17] + f[18];

    double mx =  f[1] - f[2] + f[7] - f[8] + f[9] - f[10] + f[11] - f[12] + f[13] - f[14];
	double my =  f[3] - f[4] + f[7] - f[8] - f[9] + f[10] - f[15] + f[16] - f[17] + f[18];
	double mz =  f[5] - f[6] +f[11] -f[12]- f[13] + f[14] - f[15] + f[16] + f[17] - f[18];
    
    double oneOverRho = 1.0 / (1.0 + drho);

    vx = mx * oneOverRho;
    vy = my * oneOverRho;
    vz = mz * oneOverRho;
}

void D3Q19::computeMoments(const double* f, double* m) const {

	m[0] = f[0] + f[10] + f[11] + f[12] + f[13] + f[14] + f[15] + f[16] + f[17] + f[18] + f[1] + f[2] + f[3] + f[4] + f[5] + f[6] + f[7] + f[8] + f[9];
	m[1] = -f[10] + f[11] - f[12] + f[13] - f[14] + f[1] - f[2] + f[7] - f[8] + f[9];
	m[2] = f[10] - f[15] + f[16] - f[17] + f[18] + f[3] - f[4] + f[7] - f[8] - f[9];
	m[3] = f[11] - f[12] - f[13] + f[14] - f[15] + f[16] + f[17] - f[18] + f[5] - f[6];
	m[4] = -30*f[0] + 8*f[10] + 8*f[11] + 8*f[12] + 8*f[13] + 8*f[14] + 8*f[15] + 8*f[16] + 8*f[17] + 8*f[18] - 11*f[1] - 11*f[2] - 11*f[3] - 11*f[4] - 11*f[5] - 11*f[6] + 8*f[7] + 8*f[8] + 8*f[9];
	m[5] = 12*f[0] + f[10] + f[11] + f[12] + f[13] + f[14] + f[15] + f[16] + f[17] + f[18] - 4*f[1] - 4*f[2] - 4*f[3] - 4*f[4] - 4*f[5] - 4*f[6] + f[7] + f[8] + f[9];
	m[6] = -f[10] + f[11] - f[12] + f[13] - f[14] - 4*f[1] + 4*f[2] + f[7] - f[8] + f[9];
	m[7] = f[10] - f[15] + f[16] - f[17] + f[18] - 4*f[3] + 4*f[4] + f[7] - f[8] - f[9];
	m[8] = f[11] - f[12] - f[13] + f[14] - f[15] + f[16] + f[17] - f[18] - 4*f[5] + 4*f[6];
	m[9] = f[10] + f[11] + f[12] + f[13] + f[14] - 2*f[15] - 2*f[16] - 2*f[17] - 2*f[18] + 2*f[1] + 2*f[2] - f[3] - f[4] - f[5] - f[6] + f[7] + f[8] + f[9];
	m[10] = f[10] + f[11] + f[12] + f[13] + f[14] - 2*f[15] - 2*f[16] - 2*f[17] - 2*f[18] - 4*f[1] - 4*f[2] + 2*f[3] + 2*f[4] + 2*f[5] + 2*f[6] + f[7] + f[8] + f[9];
	m[11] = f[10] - f[11] - f[12] - f[13] - f[14] + f[3] + f[4] - f[5] - f[6] + f[7] + f[8] + f[9];
	m[12] = f[10] - f[11] - f[12] - f[13] - f[14] - 2*f[3] - 2*f[4] + 2*f[5] + 2*f[6] + f[7] + f[8] + f[9];
	m[13] = -f[10] + f[7] + f[8] - f[9];
	m[14] = f[15] + f[16] - f[17] - f[18];
	m[15] = f[11] + f[12] - f[13] - f[14];
	m[16] = -f[10] - f[11] + f[12] - f[13] + f[14] + f[7] - f[8] + f[9];
	m[17] = -f[10] - f[15] + f[16] - f[17] + f[18] - f[7] + f[8] + f[9];
	m[18] = f[11] - f[12] - f[13] + f[14] + f[15] - f[16] - f[17] + f[18];
}

void D3Q19::computeEquilibriumMoments(double* meq, const double* m) const {

	double drho = m[0];

	double jx = m[1];
	double jy = m[2];
	double jz = m[3];

	double jx2 = jx*jx;
	double jy2 = jy*jy;
	double jz2 = jz*jz;
	double jj = jx2 + jy2 + jz2;

	meq[0] = drho;	// Mass density

	meq[1] = jx;	// Jx momentum
	meq[2] = jy;	// Jy momentum
	meq[3] = jz;	// Jz momentum
	
	meq[4] = -11*drho + 19*jj;  // Kinetic energy
	meq[5] = 3*drho - 5.5*jj;	// Squared kinetic energy
	
	meq[6] = (-2*jx)/3.;	// qx Energy flux
	meq[7] = (-2*jy)/3.;	// qy Energy flux
	meq[8] = (-2*jz)/3.;	// qz Energy flux
	
	meq[9] = 2*jx2 - jy2 -jz2;			// 3pxx Viscous stress tensor 
	meq[10] = (-2*jx2 +jy2 + jz2)*0.5;	// 3pi_xx
	meq[11] = jy2 - jz2; 				// p ww
	meq[12] = (-jy2 + jz2)*0.5;			// pi_ww
	meq[13] = jx*jy;					// pxy
	meq[14] = jy*jz;					// pyz
	meq[15] = jx*jz;					// pxz

	meq[16] = 0;	// mx
	meq[17] = 0;	// my
	meq[18] = 0;	// mz
}

void D3Q19::reconstructDistribution(double* f, const double* m) const {
	
	f[0] = (1.0/19.0)*m[0] - 5.0/399.0*m[4] + (1.0/21.0)*m[5];
	f[1] = (1.0/19.0)*m[0] - 1.0/18.0*m[10] + (1.0/10.0)*m[1] - 11.0/2394.0*m[4] - 1.0/63.0*m[5] - 1.0/10.0*m[6] + (1.0/18.0)*m[9];
	f[2] = (1.0/19.0)*m[0] - 1.0/18.0*m[10] - 1.0/10.0*m[1] - 11.0/2394.0*m[4] - 1.0/63.0*m[5] + (1.0/10.0)*m[6] + (1.0/18.0)*m[9];
	f[3] = (1.0/19.0)*m[0] + (1.0/36.0)*m[10] + (1.0/12.0)*m[11] - 1.0/12.0*m[12] + (1.0/10.0)*m[2] - 11.0/2394.0*m[4] - 1.0/63.0*m[5] - 1.0/10.0*m[7] - 1.0/36.0*m[9];
	f[4] = (1.0/19.0)*m[0] + (1.0/36.0)*m[10] + (1.0/12.0)*m[11] - 1.0/12.0*m[12] - 1.0/10.0*m[2] - 11.0/2394.0*m[4] - 1.0/63.0*m[5] + (1.0/10.0)*m[7] - 1.0/36.0*m[9];
	f[5] = (1.0/19.0)*m[0] + (1.0/36.0)*m[10] - 1.0/12.0*m[11] + (1.0/12.0)*m[12] + (1.0/10.0)*m[3] - 11.0/2394.0*m[4] - 1.0/63.0*m[5] - 1.0/10.0*m[8] - 1.0/36.0*m[9];
	f[6] = (1.0/19.0)*m[0] + (1.0/36.0)*m[10] - 1.0/12.0*m[11] + (1.0/12.0)*m[12] - 1.0/10.0*m[3] - 11.0/2394.0*m[4] - 1.0/63.0*m[5] + (1.0/10.0)*m[8] - 1.0/36.0*m[9];
	f[7] = (1.0/19.0)*m[0] + (1.0/72.0)*m[10] + (1.0/12.0)*m[11] + (1.0/24.0)*m[12] + (1.0/4.0)*m[13] + (1.0/8.0)*m[16] - 1.0/8.0*m[17] + (1.0/10.0)*m[1] + (1.0/10.0)*m[2] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] + (1.0/40.0)*m[6] + (1.0/40.0)*m[7] + (1.0/36.0)*m[9];
	f[8] = (1.0/19.0)*m[0] + (1.0/72.0)*m[10] + (1.0/12.0)*m[11] + (1.0/24.0)*m[12] + (1.0/4.0)*m[13] - 1.0/8.0*m[16] + (1.0/8.0)*m[17] - 1.0/10.0*m[1] - 1.0/10.0*m[2] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] - 1.0/40.0*m[6] - 1.0/40.0*m[7] + (1.0/36.0)*m[9];
	f[9] = (1.0/19.0)*m[0] + (1.0/72.0)*m[10] + (1.0/12.0)*m[11] + (1.0/24.0)*m[12] - 1.0/4.0*m[13] + (1.0/8.0)*m[16] + (1.0/8.0)*m[17] + (1.0/10.0)*m[1] - 1.0/10.0*m[2] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] + (1.0/40.0)*m[6] - 1.0/40.0*m[7] + (1.0/36.0)*m[9];
	f[10] = (1.0/19.0)*m[0] + (1.0/72.0)*m[10] + (1.0/12.0)*m[11] + (1.0/24.0)*m[12] - 1.0/4.0*m[13] - 1.0/8.0*m[16] - 1.0/8.0*m[17] - 1.0/10.0*m[1] + (1.0/10.0)*m[2] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] - 1.0/40.0*m[6] + (1.0/40.0)*m[7] + (1.0/36.0)*m[9];
	f[11] = (1.0/19.0)*m[0] + (1.0/72.0)*m[10] - 1.0/12.0*m[11] - 1.0/24.0*m[12] + (1.0/4.0)*m[15] - 1.0/8.0*m[16] + (1.0/8.0)*m[18] + (1.0/10.0)*m[1] + (1.0/10.0)*m[3] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] + (1.0/40.0)*m[6] + (1.0/40.0)*m[8] + (1.0/36.0)*m[9];
	f[12] = (1.0/19.0)*m[0] + (1.0/72.0)*m[10] - 1.0/12.0*m[11] - 1.0/24.0*m[12] + (1.0/4.0)*m[15] + (1.0/8.0)*m[16] - 1.0/8.0*m[18] - 1.0/10.0*m[1] - 1.0/10.0*m[3] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] - 1.0/40.0*m[6] - 1.0/40.0*m[8] + (1.0/36.0)*m[9];
	f[13] = (1.0/19.0)*m[0] + (1.0/72.0)*m[10] - 1.0/12.0*m[11] - 1.0/24.0*m[12] - 1.0/4.0*m[15] - 1.0/8.0*m[16] - 1.0/8.0*m[18] + (1.0/10.0)*m[1] - 1.0/10.0*m[3] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] + (1.0/40.0)*m[6] - 1.0/40.0*m[8] + (1.0/36.0)*m[9];
	f[14] = (1.0/19.0)*m[0] + (1.0/72.0)*m[10] - 1.0/12.0*m[11] - 1.0/24.0*m[12] - 1.0/4.0*m[15] + (1.0/8.0)*m[16] + (1.0/8.0)*m[18] - 1.0/10.0*m[1] + (1.0/10.0)*m[3] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] - 1.0/40.0*m[6] + (1.0/40.0)*m[8] + (1.0/36.0)*m[9];
	f[15] = (1.0/19.0)*m[0] - 1.0/36.0*m[10] + (1.0/4.0)*m[14] - 1.0/8.0*m[17] + (1.0/8.0)*m[18] - 1.0/10.0*m[2] - 1.0/10.0*m[3] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] - 1.0/40.0*m[7] - 1.0/40.0*m[8] - 1.0/18.0*m[9];
	f[16] = (1.0/19.0)*m[0] - 1.0/36.0*m[10] + (1.0/4.0)*m[14] + (1.0/8.0)*m[17] - 1.0/8.0*m[18] + (1.0/10.0)*m[2] + (1.0/10.0)*m[3] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] + (1.0/40.0)*m[7] + (1.0/40.0)*m[8] - 1.0/18.0*m[9];
	f[17] = (1.0/19.0)*m[0] - 1.0/36.0*m[10] - 1.0/4.0*m[14] - 1.0/8.0*m[17] - 1.0/8.0*m[18] - 1.0/10.0*m[2] + (1.0/10.0)*m[3] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] - 1.0/40.0*m[7] + (1.0/40.0)*m[8] - 1.0/18.0*m[9];
	f[18] = (1.0/19.0)*m[0] - 1.0/36.0*m[10] - 1.0/4.0*m[14] + (1.0/8.0)*m[17] + (1.0/8.0)*m[18] + (1.0/10.0)*m[2] - 1.0/10.0*m[3] + (4.0/1197.0)*m[4] + (1.0/252.0)*m[5] + (1.0/40.0)*m[7] - 1.0/40.0*m[8] - 1.0/18.0*m[9];
}

std::vector<double> D3Q19::relaxationMatrix(const double tau) const {
	
	std::vector<double> s(19, 0.0);
	s[1] =  1.0;	// S_X
	s[2] =  1.0;	// S_X
	s[3] =  1.0;	// S_X
	s[4] =  1.0;	// S_e
	s[5] =  1.4;	// S_epsilon
	s[6] =  1.7;	// S_q 
	s[7] =  1.7;	// S_q
	s[8] =  1.7;	// S_q
	s[9] =  1./tau;	// S_nu
	s[10] = 1.4;	// S_pi
	s[11] = 1./tau;	// S_nu
	s[12] = 1.4;	// S_pi
	s[13] = 1./tau;	// S_nu
	s[14] = 1./tau; // S_nu
	s[15] = 1./tau; // S_nu
	s[16] = 1.98;	// S_m
	s[17] = 1.98;	// S_m
	s[18] = 1.98;	// S_m
	
	return s;

}