#include "lattice/D3Q19.hpp"

void D3Q19::computeEquilibrium(double* feq, const double rho, const double vx, const double vy, const double vz) const {
    
    double vx2 = vx*vx;
    double vy2 = vy*vy;
    double vz2 = vz*vz;

    double rho0 = w_[0]*rho;
    double rho1 = w_[1]*rho;
    double rho2 = w_[7]*rho;

    double ax = 3.0 * vx;
    double ay = 3.0 * vy;
    double az = 3.0 * vz;

	feq[0] = 1.0 - 1.5 * ( vx2 + vy2 + vz2 );

	feq[1] = feq[0] + 4.5 * vx2;
	feq[2] = rho1 * ( feq[1] - ax );
	feq[1] = rho1 * ( feq[1] + ax );

	feq[3] = feq[0] + 4.5 * vy2;
	feq[4] = rho1 * ( feq[3] - ay );
	feq[3] = rho1 * ( feq[3] + ay );

	feq[5] = feq[0] + 4.5 * vz2;
	feq[6] = rho1 * ( feq[5] - az );
	feq[5] = rho1 * ( feq[5] + az );

	double cv = (ax + ay);
	feq[7] = feq[0] + 0.5*cv*cv;
	feq[8] = rho2 * ( feq[ 7] - cv );
	feq[7] = rho2 * ( feq[ 7] + cv );

	cv = (ax - ay);
	feq[9]  = feq[0] + 0.5*cv*cv;
	feq[10] = rho2 * ( feq[ 9] - cv );
	feq[9]  = rho2 * ( feq[ 9] + cv );

	cv = (ax + az);
	feq[11] = feq[0] + 0.5*cv*cv;
	feq[12] = rho2 * ( feq[11] - cv );
	feq[11] = rho2 * ( feq[11] + cv );

	cv = (ax - az);
	feq[13] = (feq[0] + 0.5*cv*cv);
	feq[14] = rho2 * ( feq[13] - cv );
	feq[13] = rho2 * ( feq[13] + cv );

	cv = (-ay - az);
	feq[15] = feq[0] + 0.5*cv*cv;
	feq[16] = rho2 * ( feq[15] - cv );
	feq[15] = rho2 * ( feq[15] + cv );

	cv = (-ay + az);
	feq[17] = feq[0] + 0.5*cv*cv;
	feq[18] = rho2 * ( feq[17] - cv );
	feq[17] = rho2 * ( feq[17] + cv );

    feq[0] = rho0 * feq[0];
}

void D3Q19::computeFields(const double* f, double& rho, double& vx, double& vy, double& vz) const {
    
    rho = f[0] + f[1] + f[2] + f[3] + f[4] + f[5] + f[6] + f[7] + f[8] + f[9] + f[10] + f[11] + f[12] + f[13] + f[14] + f[15] + f[16] + f[17] + f[18];

    double mx =  f[1] - f[2] + f[7] - f[8] + f[9] - f[10] + f[11] - f[12] + f[13] - f[14];
	double my =  f[3] - f[4] + f[7] - f[8] - f[9] + f[10] - f[15] + f[16] - f[17] + f[18];
	double mz =  f[5] - f[6] +f[11] -f[12]- f[13] + f[14] - f[15] + f[16] + f[17] - f[18];
    
    double oneOverRho = 1.0 / rho;

    vx = mx * oneOverRho;
    vy = my * oneOverRho;
    vz = mz * oneOverRho;
}

void D3Q19::computeMoments(const double* f, double* m) const {

	m[0] = f[0] + f[1] + f[10] + f[11] + f[12] + f[13] + f[14] + f[15] + f[16] + f[17] + f[18] + f[2] + f[3] + f[4] + f[5] + f[6] + f[7] + f[8] + f[9];
	m[1] = f[1] - f[10] + f[11] - f[12] + f[13] - f[14] - f[2] + f[7] - f[8] + f[9];
	m[2] = f[10] - f[15] + f[16] - f[17] + f[18] + f[3] - f[4] + f[7] - f[8] - f[9];
	m[3] = f[11] - f[12] - f[13] + f[14] - f[15] + f[16] + f[17] - f[18] + f[5] - f[6];
	m[4] = -30*f[0] - 11*f[1] + 8*f[10] + 8*f[11] + 8*f[12] + 8*f[13] + 8*f[14] + 8*f[15] + 8*f[16] + 8*f[17] + 8*f[18] - 11*f[2] - 11*f[3] - 11*f[4] - 11*f[5] - 11*f[6] + 8*f[7] + 8*f[8] + 8*f[9];
	m[5] = 12*f[0] - 4*f[1] + f[10] + f[11] + f[12] + f[13] + f[14] + f[15] + f[16] + f[17] + f[18] - 4*f[2] - 4*f[3] - 4*f[4] - 4*f[5] - 4*f[6] + f[7] + f[8] + f[9];
	m[6] = -4*f[1] - f[10] + f[11] - f[12] + f[13] - f[14] + 4*f[2] + f[7] - f[8] + f[9];
	m[7] = f[10] - f[15] + f[16] - f[17] + f[18] - 4*f[3] + 4*f[4] + f[7] - f[8] - f[9];
	m[8] = f[11] - f[12] - f[13] + f[14] - f[15] + f[16] + f[17] - f[18] - 4*f[5] + 4*f[6];
	m[9] = 2*f[1] + f[10] + f[11] + f[12] + f[13] + f[14] - 2*f[15] - 2*f[16] - 2*f[17] - 2*f[18] + 2*f[2] - f[3] - f[4] - f[5] - f[6] + f[7] + f[8] + f[9];
	m[10] = -4*f[1] + f[10] + f[11] + f[12] + f[13] + f[14] - 2*f[15] - 2*f[16] - 2*f[17] - 2*f[18] - 4*f[2] + 2*f[3] + 2*f[4] + 2*f[5] + 2*f[6] + f[7] + f[8] + f[9];
	m[11] = f[10] - f[11] - f[12] - f[13] - f[14] + f[3] + f[4] - f[5] - f[6] + f[7] + f[8] + f[9];
	m[12] = f[10] - f[11] - f[12] - f[13] - f[14] - 2*f[3] - 2*f[4] + 2*f[5] + 2*f[6] + f[7] + f[8] + f[9];
	m[13] = -f[10] + f[7] + f[8] - f[9];
	m[14] = f[15] + f[16] - f[17] - f[18];
	m[15] = f[11] + f[12] - f[13] - f[14];
	m[16] = -f[10] - f[11] + f[12] - f[13] + f[14] + f[7] - f[8] + f[9];
	m[17] = -f[10] - f[15] + f[16] - f[17] + f[18] - f[7] + f[8] + f[9];
	m[18] = f[11] - f[12] - f[13] + f[14] + f[15] - f[16] - f[17] + f[18];
}

void D3Q19::computeEquilibriumMoments(double* meq, const double* m) const {

	double rho = m[0];
	double vx  = m[1]/m[0];
	double vy  = m[2]/m[0];
	double vz  = m[3]/m[0];
//	double vx2 = vx*vx;
	double vy2 = vy*vy;
	double vz2 = vz*vz;
	double vv = vx*vx + vy2 + vz2;
	meq[0] = rho;
	meq[1] = rho*vx;
	meq[2] = rho*vy;
	meq[3] = rho*vz;
	meq[4] = rho*(-11 + 19*vv);
	meq[5] = -475./63. * rho*vv ; // rho*(3 - (11*vv)/2.);
	meq[6] = (-2*rho*vx)/3.;
	meq[7] = (-2*rho*vy)/3.;
	meq[8] = (-2*rho*vz)/3.;
	meq[9] = rho*(2*vv - 3*(vy2 + vz2));
	meq[10] = 0.;// (rho*(-2*vv + 3*(vy2 + vz2)))/2.;
	meq[11] = rho*(vy2 - vz2);
	meq[12] = 0.; // (rho*(-vy2 + vz2))/2.;
	meq[13] = rho*vx*vy;
	meq[14] = rho*vy*vz;
	meq[15] = rho*vx*vz;
	meq[16] = 0;
	meq[17] = 0;
	meq[18] = 0;
}

void D3Q19::reconstructDistribution(double* f, const double* m) const {
	
	f[0] = (21*m[0] - 5*m[4] + 19*m[5])/399.;
	f[1] = (630*m[0] + 1197*m[1] - 665*m[10] - 55*m[4] - 190*m[5] - 1197*m[6] + 665*m[9])/11970.;
	f[2] = (630*m[0] - 1197*m[1] - 665*m[10] - 55*m[4] - 190*m[5] + 1197*m[6] + 665*m[9])/11970.;
	f[3] = m[0]/19. + m[10]/36. + m[11]/12. - m[12]/12. + m[2]/10. - (11*m[4])/2394. - m[5]/63. - m[7]/10. - m[9]/36.;
	f[4] = m[0]/19. + m[10]/36. + m[11]/12. - m[12]/12. - m[2]/10. - (11*m[4])/2394. - m[5]/63. + m[7]/10. - m[9]/36.;
	f[5] = m[0]/19. + m[10]/36. - m[11]/12. + m[12]/12. + m[3]/10. - (11*m[4])/2394. - m[5]/63. - m[8]/10. - m[9]/36.;
	f[6] = m[0]/19. + m[10]/36. - m[11]/12. + m[12]/12. - m[3]/10. - (11*m[4])/2394. - m[5]/63. + m[8]/10. - m[9]/36.;
	f[7] = m[0]/19. + m[1]/10. + m[10]/72. + m[11]/12. + m[12]/24. + m[13]/4. + m[16]/8. - m[17]/8. + m[2]/10. + (4*m[4])/1197. + m[5]/252. + m[6]/40. + m[7]/40. + m[9]/36.;
	f[8] = m[0]/19. - m[1]/10. + m[10]/72. + m[11]/12. + m[12]/24. + m[13]/4. - m[16]/8. + m[17]/8. - m[2]/10. + (4*m[4])/1197. + m[5]/252. - m[6]/40. - m[7]/40. + m[9]/36.;
	f[9] = m[0]/19. + m[1]/10. + m[10]/72. + m[11]/12. + m[12]/24. - m[13]/4. + m[16]/8. + m[17]/8. - m[2]/10. + (4*m[4])/1197. + m[5]/252. + m[6]/40. - m[7]/40. + m[9]/36.;
	f[10] = m[0]/19. - m[1]/10. + m[10]/72. + m[11]/12. + m[12]/24. - m[13]/4. - m[16]/8. - m[17]/8. + m[2]/10. + (4*m[4])/1197. + m[5]/252. - m[6]/40. + m[7]/40. + m[9]/36.;
	f[11] = m[0]/19. + m[1]/10. + m[10]/72. - m[11]/12. - m[12]/24. + m[15]/4. - m[16]/8. + m[18]/8. + m[3]/10. + (4*m[4])/1197. + m[5]/252. + m[6]/40. + m[8]/40. + m[9]/36.;
	f[12] = m[0]/19. - m[1]/10. + m[10]/72. - m[11]/12. - m[12]/24. + m[15]/4. + m[16]/8. - m[18]/8. - m[3]/10. + (4*m[4])/1197. + m[5]/252. - m[6]/40. - m[8]/40. + m[9]/36.;
	f[13] = m[0]/19. + m[1]/10. + m[10]/72. - m[11]/12. - m[12]/24. - m[15]/4. - m[16]/8. - m[18]/8. - m[3]/10. + (4*m[4])/1197. + m[5]/252. + m[6]/40. - m[8]/40. + m[9]/36.;
	f[14] = m[0]/19. - m[1]/10. + m[10]/72. - m[11]/12. - m[12]/24. - m[15]/4. + m[16]/8. + m[18]/8. + m[3]/10. + (4*m[4])/1197. + m[5]/252. - m[6]/40. + m[8]/40. + m[9]/36.;
	f[15] = m[0]/19. - m[10]/36. + m[14]/4. - m[17]/8. + m[18]/8. - m[2]/10. - m[3]/10. + (4*m[4])/1197. + m[5]/252. - m[7]/40. - m[8]/40. - m[9]/18.;
	f[16] = m[0]/19. - m[10]/36. + m[14]/4. + m[17]/8. - m[18]/8. + m[2]/10. + m[3]/10. + (4*m[4])/1197. + m[5]/252. + m[7]/40. + m[8]/40. - m[9]/18.;
	f[17] = m[0]/19. - m[10]/36. - m[14]/4. - m[17]/8. - m[18]/8. - m[2]/10. + m[3]/10. + (4*m[4])/1197. + m[5]/252. - m[7]/40. + m[8]/40. - m[9]/18.;
	f[18] = m[0]/19. - m[10]/36. - m[14]/4. + m[17]/8. + m[18]/8. + m[2]/10. - m[3]/10. + (4*m[4])/1197. + m[5]/252. + m[7]/40. - m[8]/40. - m[9]/18.;

}

std::vector<double> D3Q19::relaxationMatrix(const double tau, const int numOfVel) const {
	
	std::vector<double> s(numOfVel, 0.0);

	s[4] =  1.19;
	s[5] =  1.4;
	s[6] =  1.2;
	s[7] =  1.2;
	s[8] =  1.2;
	s[9] =  1./tau;
	s[10] = 1.4;
	s[11] = 1./tau;
	s[12] = 1.4;
	s[13] = 1./tau;
	s[14] = 1./tau;
	s[15] = 1./tau;
	s[16] = 1.98;
	s[17] = 1.98;
	s[18] = 1.98;
	
	return s;

}